{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. New content dfjsdlkfjlksd Writing Docs https://www.mkdocs.org/user-guide/writing-your-docs/ Setup Creating a self-hosted, Git versioned handbook similar to GitLab's handbook can be achieved with a combination of Git for version control, a static site generator for building the site, and a web server for hosting it. Here\u2019s a simple way to get started: 1. Set Up Your Git Repository Initialize a Git Repository: Create a new directory for your handbook and initialize a Git repository. bash mkdir my-handbook cd my-handbook git init Add a Remote Repository: If you want to host your repository on a platform like GitHub, GitLab, or a self-hosted Git server, add the remote URL. bash git remote add origin <remote-repo-url> 2. Choose a Static Site Generator Static site generators like Jekyll, Hugo, or MkDocs can transform your Markdown files into a static website. MkDocs is particularly suitable for documentation purposes. Using MkDocs Install MkDocs: MkDocs requires Python, so ensure you have Python installed. Install MkDocs using pip. bash pip install mkdocs Create a New MkDocs Project: Initialize a new MkDocs project in your handbook directory. bash mkdocs new . Edit mkdocs.yml : This is the configuration file for your MkDocs project. Customize it according to your needs, such as changing the site name or theme. Add Your Content: Add Markdown files to the docs directory. For example, create an index.md file as the homepage. ```markdown # Welcome to My Handbook This is the homepage of the handbook. ``` Build and Serve Locally: Preview your site locally. bash mkdocs serve This will start a local server at http://127.0.0.1:8000 . 3. Set Up Automated Deployment You can automate the deployment of your MkDocs site using Git hooks or CI/CD pipelines. For instance, GitHub Pages or GitLab Pages can automatically deploy your site whenever you push changes to your repository. Using GitHub Pages GitHub Actions Workflow: Create a GitHub Actions workflow file .github/workflows/deploy.yml . ```yaml name: Deploy MkDocs site on: push: branches: - main # or the branch you want to deploy from jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Set up Python uses: actions/setup-python@v2 with: python-version: '3.x' - name: Install MkDocs and dependencies run: | pip install mkdocs - name: Deploy to GitHub Pages run: | mkdocs gh-deploy --force env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} ``` Commit and Push: Commit your changes and push them to GitHub. bash git add . git commit -m \"Set up MkDocs site\" git push origin main 4. Host Your Handbook Once your site is built and deployed, it will be accessible via the URL provided by your hosting service (e.g., https://<username>.github.io/<repo> for GitHub Pages). Summary Set up a Git repository to version your handbook. Choose a static site generator like MkDocs. Create your content in Markdown files. Build and serve your site locally to preview changes. Automate deployment using GitHub Actions, GitLab CI/CD, or another CI tool. Host your site using GitHub Pages, GitLab Pages, or a similar service. By following these steps, you can create a self-hosted, Git versioned handbook with ease. 5. Setup GitHub pages settings Once the action has deployed successfully once - In the repository on github, go to settings > pages. Under Build and deployment, select source as \"Deploy from a branch\". Then select gh-pages as your branch and choose the root folder. Then press save. This will serve the github pages content from the gh-pages branch.","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#new-content","text":"dfjsdlkfjlksd","title":"New content"},{"location":"#writing-docs","text":"https://www.mkdocs.org/user-guide/writing-your-docs/","title":"Writing Docs"},{"location":"#setup","text":"Creating a self-hosted, Git versioned handbook similar to GitLab's handbook can be achieved with a combination of Git for version control, a static site generator for building the site, and a web server for hosting it. Here\u2019s a simple way to get started:","title":"Setup"},{"location":"#1-set-up-your-git-repository","text":"Initialize a Git Repository: Create a new directory for your handbook and initialize a Git repository. bash mkdir my-handbook cd my-handbook git init Add a Remote Repository: If you want to host your repository on a platform like GitHub, GitLab, or a self-hosted Git server, add the remote URL. bash git remote add origin <remote-repo-url>","title":"1. Set Up Your Git Repository"},{"location":"#2-choose-a-static-site-generator","text":"Static site generators like Jekyll, Hugo, or MkDocs can transform your Markdown files into a static website. MkDocs is particularly suitable for documentation purposes.","title":"2. Choose a Static Site Generator"},{"location":"#using-mkdocs","text":"Install MkDocs: MkDocs requires Python, so ensure you have Python installed. Install MkDocs using pip. bash pip install mkdocs Create a New MkDocs Project: Initialize a new MkDocs project in your handbook directory. bash mkdocs new . Edit mkdocs.yml : This is the configuration file for your MkDocs project. Customize it according to your needs, such as changing the site name or theme. Add Your Content: Add Markdown files to the docs directory. For example, create an index.md file as the homepage. ```markdown # Welcome to My Handbook This is the homepage of the handbook. ``` Build and Serve Locally: Preview your site locally. bash mkdocs serve This will start a local server at http://127.0.0.1:8000 .","title":"Using MkDocs"},{"location":"#3-set-up-automated-deployment","text":"You can automate the deployment of your MkDocs site using Git hooks or CI/CD pipelines. For instance, GitHub Pages or GitLab Pages can automatically deploy your site whenever you push changes to your repository.","title":"3. Set Up Automated Deployment"},{"location":"#using-github-pages","text":"GitHub Actions Workflow: Create a GitHub Actions workflow file .github/workflows/deploy.yml . ```yaml name: Deploy MkDocs site on: push: branches: - main # or the branch you want to deploy from jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout repository uses: actions/checkout@v2 - name: Set up Python uses: actions/setup-python@v2 with: python-version: '3.x' - name: Install MkDocs and dependencies run: | pip install mkdocs - name: Deploy to GitHub Pages run: | mkdocs gh-deploy --force env: GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} ``` Commit and Push: Commit your changes and push them to GitHub. bash git add . git commit -m \"Set up MkDocs site\" git push origin main","title":"Using GitHub Pages"},{"location":"#4-host-your-handbook","text":"Once your site is built and deployed, it will be accessible via the URL provided by your hosting service (e.g., https://<username>.github.io/<repo> for GitHub Pages).","title":"4. Host Your Handbook"},{"location":"#summary","text":"Set up a Git repository to version your handbook. Choose a static site generator like MkDocs. Create your content in Markdown files. Build and serve your site locally to preview changes. Automate deployment using GitHub Actions, GitLab CI/CD, or another CI tool. Host your site using GitHub Pages, GitLab Pages, or a similar service. By following these steps, you can create a self-hosted, Git versioned handbook with ease.","title":"Summary"},{"location":"#5-setup-github-pages-settings","text":"Once the action has deployed successfully once - In the repository on github, go to settings > pages. Under Build and deployment, select source as \"Deploy from a branch\". Then select gh-pages as your branch and choose the root folder. Then press save. This will serve the github pages content from the gh-pages branch.","title":"5. Setup GitHub pages settings"},{"location":"info/","text":"About This is the about page Sub-Heading 1 Sub-Heading 2","title":"About"},{"location":"info/#about","text":"This is the about page","title":"About"},{"location":"info/#sub-heading-1","text":"","title":"Sub-Heading 1"},{"location":"info/#sub-heading-2","text":"","title":"Sub-Heading 2"},{"location":"process/software/","text":"Process for software Process for software page Subheading","title":"Process for software"},{"location":"process/software/#process-for-software","text":"Process for software page","title":"Process for software"},{"location":"process/software/#subheading","text":"","title":"Subheading"},{"location":"process/software/more-info/","text":"More info More info on software","title":"More info"},{"location":"process/software/more-info/#more-info","text":"More info on software","title":"More info"}]}